"Represents JSON cache data"
scalar Cache

"Represents data for a specific query"
scalar QueryData

"Represents variables for a query"
scalar Variables

"Represents options for a query"
scalar QueryOptions

scalar JSON
scalar Diff
scalar GraphQLErrorPath

type Query {
  clients: [Client!]!
  client(id: ID!): Client
}

type Subscription {
  cacheWritten(clientId: ID!): CacheWrite!
}

type CacheWrite {
  data: QueryData
  documentString: String!
  variables: Variables
  dataId: String
  overwrite: Boolean
  broadcast: Boolean
  cacheDiff: Diff
}

type BaseCacheSizes {
  fragmentQueryDocuments: CacheSize!
}

type CacheSize {
  key: String!
  limit: Int
  size: Int
}

interface Client {
  id: String!
  name: String
  version: String!
  cache: Cache!
  queries: ClientQueries!
  mutations: ClientMutations!
  memoryInternals: MemoryInternals
}

interface ClientQueries {
  total: Int!
  items: [ClientWatchedQuery!]!
}

interface ClientMutations {
  total: Int!
  items: [ClientMutation!]!
}

type ClientV3 implements Client {
  id: String!
  name: String
  version: String!
  queries: ClientV3Queries!
  mutations: ClientV3Mutations!
  cache: Cache!
  memoryInternals: ClientV3MemoryInternals
}

type ClientV4 implements Client {
  id: String!
  name: String
  version: String!
  cache: Cache!
  mutations: ClientV4Mutations!
  queries: ClientV4Queries!
  memoryInternals: ClientV4MemoryInternals
}

type ClientV3Queries implements ClientQueries {
  total: Int!
  items: [ClientV3WatchedQuery!]!
}

type ClientV4Queries implements ClientQueries {
  total: Int!
  items: [ClientV4WatchedQuery!]!
}

type ClientV3Mutations implements ClientMutations {
  total: Int!
  items: [ClientV3Mutation!]!
}

type ClientV4Mutations implements ClientMutations {
  total: Int!
  items: [ClientV4Mutation!]!
}

type DocumentTransformCacheSizes {
  cache: CacheSize!
}

type FragmentRegistryCacheSizes {
  lookup: CacheSize!
  findFragmentSpreads: CacheSize!
  transform: CacheSize!
}

type InMemoryCacheSizes {
  maybeBroadcastWatch: CacheSize!
  executeSelectionSet: CacheSize!
  executeSubSelectedArray: CacheSize!
}

union LinkCacheSize =
  | PersistedQueryLinkCacheSizes
  | RemoveTypenameFromVariablesLinkCacheSizes

interface MemoryInternals {
  raw: JSON
  caches: MemoryInternalsCaches
}

interface MemoryInternalsCaches {
  print: CacheSize!
  canonicalStringify: CacheSize!
  links: [LinkCacheSize!]!
  queryManager: QueryManagerCacheSizes!
  fragmentRegistry: FragmentRegistryCacheSizes!
  cache: BaseCacheSizes!
  addTypenameDocumentTransform: [DocumentTransformCacheSizes!]
  inMemoryCache: InMemoryCacheSizes!
}

type ClientV3MemoryInternals implements MemoryInternals {
  raw: JSON
  caches: ClientV3MemoryInternalsCaches!
}

type ClientV4MemoryInternals implements MemoryInternals {
  raw: JSON
  caches: ClientV4MemoryInternalsCaches!
}

type ClientV3MemoryInternalsCaches implements MemoryInternalsCaches {
  print: CacheSize!
  parser: CacheSize!
  canonicalStringify: CacheSize!
  links: [LinkCacheSize!]!
  queryManager: QueryManagerCacheSizes!
  fragmentRegistry: FragmentRegistryCacheSizes!
  cache: BaseCacheSizes!
  addTypenameDocumentTransform: [DocumentTransformCacheSizes!]
  inMemoryCache: InMemoryCacheSizes!
}

type ClientV4MemoryInternalsCaches implements MemoryInternalsCaches {
  print: CacheSize!
  canonicalStringify: CacheSize!
  links: [LinkCacheSize!]!
  queryManager: QueryManagerCacheSizes!
  fragmentRegistry: FragmentRegistryCacheSizes!
  cache: BaseCacheSizes!
  addTypenameDocumentTransform: [DocumentTransformCacheSizes!]
  inMemoryCache: InMemoryCacheSizes!
}

type QueryManagerCacheSizes {
  getDocumentInfo: CacheSize!
  documentTransforms: [DocumentTransformCacheSizes!]
}

type PersistedQueryLinkCacheSizes {
  persistedQueryHashes: CacheSize!
}

type RemoveTypenameFromVariablesLinkCacheSizes {
  getVariableDefinitions: CacheSize!
}

interface ClientMutation {
  id: ID!
  name: String
  mutationString: String!
  variables: Variables
  loading: Boolean!
}

type ClientV3Mutation implements ClientMutation {
  id: ID!
  name: String
  mutationString: String!
  variables: Variables
  loading: Boolean!
  error: ClientV3MutationError
}

type ClientV4Mutation implements ClientMutation {
  id: ID!
  name: String
  mutationString: String!
  variables: Variables
  loading: Boolean!
  error: ErrorLike
}

union ClientV3MutationError = SerializedError | SerializedApolloError

type ClientV3WatchedQueries {
  count: Int!
  queries: [ClientV3WatchedQuery!]!
}

interface ClientWatchedQuery {
  id: ID!
  name: String
  queryString: String!
  cachedData: QueryData
  variables: Variables
  options: QueryOptions
  networkStatus: Int!
  pollInterval: Int
}

type ClientV3WatchedQuery implements ClientWatchedQuery {
  id: ID!
  name: String
  queryString: String!
  cachedData: QueryData
  variables: Variables
  options: QueryOptions
  networkStatus: Int!
  error: SerializedApolloError
  pollInterval: Int
}

type ClientV4WatchedQuery implements ClientWatchedQuery {
  id: ID!
  name: String
  queryString: String!
  cachedData: QueryData
  variables: Variables
  options: QueryOptions
  networkStatus: Int!
  error: ErrorLike
  pollInterval: Int
}

interface ErrorLike {
  message: String!
  name: String!
  stack: String
}

type SerializedApolloError {
  message: String!
  clientErrors: [String!]!
  name: String!
  networkError: SerializedError
  graphQLErrors: [SerializedGraphQLError!]!
  protocolErrors: [String!]!
}

type SerializedCombinedGraphQLErrors implements ErrorLike {
  message: String!
  name: String!
  stack: String
  errors: [SerializedGraphQLError!]!
  data: QueryData
  extensions: JSON
}

type SerializedCombinedProtocolErrors implements ErrorLike {
  message: String!
  name: String!
  stack: String
  errors: [SerializedGraphQLError!]!
}

type SerializedLocalStateError implements ErrorLike {
  message: String!
  name: String!
  stack: String
  path: GraphQLErrorPath
  cause: SerializedError
}

type SerializedServerError implements ErrorLike {
  message: String!
  name: String!
  stack: String
  bodyText: String!
  statusCode: Int!
}

type SerializedServerParseError implements ErrorLike {
  message: String!
  name: String!
  stack: String
  bodyText: String!
  statusCode: Int!
}

type SerializedUnconventionalError implements ErrorLike {
  message: String!
  name: String!
  stack: String
  cause: JSON
}

type SerializedError implements ErrorLike {
  message: String!
  name: String!
  stack: String
}

type SerializedGraphQLError {
  message: String!
  locations: [GraphQLErrorSourceLocation!]
  path: GraphQLErrorPath
  extensions: JSON
}

type GraphQLErrorSourceLocation {
  line: Int!
  column: Int!
}
